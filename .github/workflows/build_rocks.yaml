# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

name: Build images

on:
  workflow_call:
    inputs:
      owner:
        type: string
        description: Registry owner to push the built images
        default: ""
      registry:
        type: string
        description: Registry to push the built images
        default: ""
      runs-on:
        type: string
        description: Image runner for building the images
        default: ubuntu-22.04
      trivy-image-config:
        type: string
        description: Trivy YAML configuration for image testing that is checked in as part of the repo
      working-directory:
        type: string
        description: The working directory for jobs
        default: "./"
      rockcraft-channel:
        type: string
        description: Rockcraft channel to use for the integration test
        default: "latest/stable"
      rockcraft-ref:
        description: Used in conjunction with rockcraft-repository to pull and build rockcraft from source instead of using snapstore version.
        type: string
        default: ""
      rockcraft-repository:
        description: Pull and build rockcraft from source instead of using snapstore version (this means that the rockcraft-channel input will be ignored).
        type: string
        default: ""
    outputs:
      images:
        description: List of images built
        value: ${{ jobs.get-rocks.outputs.images }}

jobs:
  get-rocks:
    name: Get rocks
    runs-on: ubuntu-22.04
    outputs:
      rock-paths: ${{ steps.gen-rock-paths-and-images.outputs.rock-paths }}
      images: "${{ steps.gen-rock-paths-and-images.outputs.images }}"
    steps:
      - uses: actions/checkout@v4.1.3
      - name: Generate rock paths and images
        id: gen-rock-paths-and-images
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const path = require('path')
            const workingDir = core.getInput('working-directory')
            const rockcraftGlobber = await glob.create(
              path.join(workingDir, '**/rockcraft.yaml')
            )
            const rockPaths = []
            const images = []
            for (const rockcraftFile of await rockcraftGlobber.glob()) {
              let rockPath = path.relative('.', path.dirname(rockcraftFile))
              if (rockPath === '') {
                rockPath = '.'
              }
              rockPaths.push(rockPath)
              core.info(`found rockcraft.yaml in ${rockPath}`)
              const fileHash = await glob.hashFiles(path.join(rockPath, '**') + '\n!.git')
              const rockName = (
                await exec.getExecOutput('yq', ['.name', rockcraftFile])
              ).stdout.trim()
              const image = `${{ inputs.registry }}/${{ inputs.owner }}/${rockName}:${fileHash}`
              core.info(`generate image name: ${image}`)
              images.push(image)
            }
            core.setOutput('rock-paths', JSON.stringify(rockPaths))
            core.setOutput('images', JSON.stringify(images))

  build-rocks:
    name: Build rock
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
      packages: write
    needs: [get-rocks]
    if: ${{ needs.get-rocks.outputs.rock-paths != '[]' }}
    strategy:
      matrix:
        path: ${{ fromJSON(needs.get-rocks.outputs.rock-paths) }}
    steps:
      - uses: actions/checkout@v4
        if: inputs.rockcraft-repository != ''
        with:
          repository: ${{ inputs.rockcraft-repository }}
          ref: ${{ inputs.rockcraft-ref }}
          path: rockcraft
          fetch-depth: 0
      - name: Get Rockcraft SHA
        if: inputs.rockcraft-repository != ''
        id: rockcraft-sha
        working-directory: ./rockcraft
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Restore Rockcraft Cache
        if: inputs.rockcraft-repository != ''
        id: restore-rockcraft
        uses: actions/cache/restore@v4
        with:
          path: ./rockcraft*.snap
          key: rockcraft-${{ steps.rockcraft-sha.outputs.sha }}
      - uses: canonical/setup-lxd@v0.1.1
      - name: Install Snapcraft
        if: steps.restore-rockcraft.outputs.cache-hit != 'true' && inputs.rockcraft-repository != ''
        run: sudo snap install snapcraft --classic
      - name: Build Rockcraft
        if: steps.restore-rockcraft.outputs.cache-hit != 'true' && inputs.rockcraft-repository != ''
        working-directory: ./rockcraft
        run: |
          snapcraft --use-lxd
          cp rockcraft*.snap ../
      - name: Save Rockcraft Cache
        uses: actions/cache/save@v4
        if: steps.restore-rockcraft.outputs.cache-hit != 'true' && inputs.rockcraft-repository != ''
        with:
          path: ./rockcraft*.snap
          key: ${{ steps.restore-rockcraft.outputs.cache-primary-key }}
      - name: Install Rockcraft
        if: inputs.rockcraft-repository != ''
        run: sudo snap install --dangerous --classic rockcraft*.snap
      - name: Install rockcraft
        if: inputs.rockcraft-repository == ''
        run: |
          sudo snap install rockcraft --classic --channel ${{ inputs.rockcraft-channel }}
      - name: Cleanup Rockcraft
        if: inputs.rockcraft-repository != ''
        run: rm -rf rockcraft*
      - uses: actions/checkout@v4.1.3
        with:
          fetch-depth: 0
      - name: Extract rock information
        run: |
          IMAGE_NAME=$(yq '.name' "${{ matrix.path }}/rockcraft.yaml")
          IMAGE_BASE=$(yq '.base' "${{ matrix.path }}/rockcraft.yaml")
          IMAGE_BUILD_BASE=$(yq '.["build-base"] // .base' "${{ matrix.path }}/rockcraft.yaml")
          IMAGE_REF=${{ inputs.registry }}/${{ inputs.owner }}/$IMAGE_NAME:${{ hashFiles(format('{0}/{1}', matrix.path, '**'), '!.git') }}
          INODE_NUM=$(ls -id ${{ matrix.path }} | cut -f 1 -d " ")
          ROCKCRAFT_CONTAINER_NAME=rockcraft-$IMAGE_NAME-on-amd64-for-amd64-$INODE_NUM
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_BASE=$IMAGE_BASE" >> $GITHUB_ENV
          echo "IMAGE_BUILD_BASE=$IMAGE_BUILD_BASE" >> $GITHUB_ENV
          echo "IMAGE_REF=$IMAGE_REF" >> $GITHUB_ENV
          echo "ROCKCRAFT_CONTAINER_NAME=$ROCKCRAFT_CONTAINER_NAME" >> $GITHUB_ENV
      - name: Build rock
        env:
          ROCKCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS: "true"
        working-directory: ${{ matrix.path }}
        run: rockcraft pack --verbosity trace
      - name: Upload rock to ghcr.io
        if: steps.rock-cache.outputs.cache-hit != 'true' || inputs.cache-action == 'save'
        run: |
          skopeo --insecure-policy copy oci-archive:$(ls "${{ matrix.path }}"/*.rock) docker://$IMAGE_REF --dest-creds "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}"
      - name: Run Github Trivy Image Action
        uses: aquasecurity/trivy-action@0.19.0
        if: steps.rock-cache.outputs.cache-hit != 'true' || inputs.cache-action == 'save'
        with:
          image-ref: ${{ env.IMAGE_REF }}
          trivy-config: ${{ inputs.trivy-image-config }}
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      - name: Check trivyignore
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.46.0
          if [ -f ".trivyignore" ]
          then
            output=$(trivy image $ROCK_IMAGE --severity HIGH,CRITICAL -q -f json --ignorefile "" | jq -r '.Results[].Vulnerabilities[].VulnerabilityID' 2>/dev/null || echo "No vulnerabilities found")
            line=0
            while read CVE;
            do
              line=$(( line + 1 ))
              if [[ "$output" != *"$CVE"* ]] && [[ ! "$CVE" =~ ^#.* ]]
              then
              echo "::notice file=.trivyignore,line=${line}::$CVE not present anymore, can be safely removed."
              fi
            done < .trivyignore
          fi
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          ROCK_IMAGE: ${{ env.IMAGE_REF }}
