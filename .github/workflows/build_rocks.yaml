# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

name: Build images

on:
  workflow_call:
    inputs:
      owner:
        type: string
        description: Registry owner to push the built images
        default: ""
      registry:
        type: string
        description: Registry to push the built images
        default: ""
      runs-on:
        type: string
        description: Image runner for building the images
        default: ubuntu-22.04
      trivy-image-config:
        type: string
        description: Trivy YAML configuration for image testing that is checked in as part of the repo
      working-directory:
        type: string
        description: The working directory for jobs
        default: "./"
      cache-action:
        type: string
        description: The cache action can either be "save" or "restore".
        default: restore
    outputs:
      images:
        description: List of images built
        value: ${{ jobs.get-rocks.outputs.images }}

jobs:
  get-rocks:
    name: Get rocks
    runs-on: ubuntu-22.04
    outputs:
      rock-paths: ${{ steps.gen-rock-paths-and-images.outputs.rock-paths }}
      images: "${{ steps.gen-rock-paths-and-images.outputs.images }}"
    steps:
      - name: Validate inputs
        run: |
          if [ "${{ inputs.cache-action }}" != "save" ] && [ "${{ inputs.cache-action }}" != "restore" ]; then
            echo "Invalid value for cache-action. It must be 'save' or 'restore'"
            exit 1
          fi
      - uses: actions/checkout@v4.1.1
      - name: Generate rock paths and images
        id: gen-rock-paths-and-images
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const path = require('path')
            const workingDir = core.getInput('working-directory')
            const rockcraftGlobber = await glob.create(
              path.join(workingDir, '**/rockcraft.yaml')
            )
            const rockPaths = []
            const images = []
            for (const rockcraftFile of await rockcraftGlobber.glob()) {
              const rockPath = path.relative('.', path.dirname(rockcraftFile))
              rockPaths.push(rockPath)
              core.info(`found rockcraft.yaml in ${rockPath}`)
              const fileHash = await glob.hashFiles(path.join(rockPath, '**'))
              const rockName = (
                await exec.getExecOutput('yq', ['.name', rockcraftFile])
              ).stdout.trim()
              const image = `${{ inputs.registry }}/${{ inputs.owner }}/${rockName}:${fileHash}`
              core.info(`generate image name: ${image}`)
              images.push(image)
            }
            core.setOutput('rock-paths', JSON.stringify(rockPaths))
            core.setOutput('images', JSON.stringify(images))

  build-rocks:
    name: Build rock
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
      packages: write
    needs: [get-rocks]
    if: ${{ needs.get-rocks.outputs.rock-paths != '[]' }}
    strategy:
      matrix:
        path: ${{ fromJSON(needs.get-rocks.outputs.rock-paths) }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      - name: Extract rock information
        run: |
          IMAGE_NAME=$(yq '.name' "${{ matrix.path }}/rockcraft.yaml")
          IMAGE_BASE=$(yq '.base' "${{ matrix.path }}/rockcraft.yaml")
          IMAGE_BUILD_BASE=$(yq '.["build-base"] // .base' "${{ matrix.path }}/rockcraft.yaml")
          IMAGE_REF=${{ inputs.registry }}/${{ inputs.owner }}/$IMAGE_NAME:${{ hashFiles(format('{0}/{1}', matrix.path, '**')) }}
          INODE_NUM=$(ls -id ${{ matrix.path }} | cut -f 1 -d " ")
          ROCKCRAFT_CONTAINER_NAME=rockcraft-$IMAGE_NAME-$INODE_NUM
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_BASE=$IMAGE_BASE" >> $GITHUB_ENV
          echo "IMAGE_BUILD_BASE=$IMAGE_BUILD_BASE" >> $GITHUB_ENV
          echo "IMAGE_REF=$IMAGE_REF" >> $GITHUB_ENV
          echo "ROCKCRAFT_CONTAINER_NAME=$ROCKCRAFT_CONTAINER_NAME" >> $GITHUB_ENV
      - name: Generate rockcraft cache key
        run: |
          ROCKCRAFT_PATH="${{ matrix.path }}"
          ROCKCRAFT_PATH="${ROCKCRAFT_PATH%/}"
          ROCKCRAFT_CACHE_KEY_BASE="$ROCKCRAFT_PATH/rockcraft-cache?name=${{ env.IMAGE_NAME }}&base=${{ env.IMAGE_BUILD_BASE }}&build-base=${{ env.IMAGE_BUILD_BASE }}"
          ROCK_CACHE_KEY_BASE="$ROCKCRAFT_PATH/${{ env.IMAGE_NAME }}.rock?filehash=${{ hashFiles(format('{0}/{1}', matrix.path, '**')) }}"
          echo "ROCKCRAFT_CACHE_KEY=$ROCKCRAFT_CACHE_KEY_BASE&date=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo 'ROCKCRAFT_CACHE_ALT_KEYS<<EOF' >> $GITHUB_ENV 
          for d in {1..2}
            do echo "$ROCKCRAFT_CACHE_KEY_BASE&date=$(date -d"-$d days" +%Y-%m-%d)" >> $GITHUB_ENV
          done
          echo 'EOF' >> $GITHUB_ENV
          echo "ROCK_CACHE_KEY=$ROCK_CACHE_KEY_BASE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo 'ROCK_CACHE_ALT_KEYS<<EOF' >> $GITHUB_ENV 
          for d in {1..2}
            do echo "$ROCK_CACHE_KEY_BASE&date=$(date -d"-$d days" +%Y-%m-%d)" >> $GITHUB_ENV
          done
          echo 'EOF' >> $GITHUB_ENV
      - name: Restore rock cache
        if: inputs.cache-action == 'restore'
        uses: actions/cache/restore@v3.3.2
        id: rock-cache
        with:
          path: ~/.rock-cache
          key: ${{ env.ROCK_CACHE_KEY }}
          restore-keys: ${{ env.ROCK_CACHE_ALT_KEYS }}
      - name: Restore rockcraft container cache
        if: steps.rock-cache.outputs.cache-hit != 'true' && inputs.cache-action == 'restore' 
        uses: actions/cache/restore@v3.3.2
        id: rockcraft-cache
        with:
          path: ~/.rockcraft-cache/
          key: ${{ env.ROCKCRAFT_CACHE_KEY }}
          restore-keys: ${{ env.ROCKCRAFT_CACHE_ALT_KEYS }}
      - name: Setup lxd
        if: steps.rockcraft-cache.outputs.cache-hit == 'true'
        run: |
          sudo groupadd --force --system lxd
          sudo usermod --append --groups lxd runner
          sudo snap refresh lxd --channel latest/stable
          sudo lxd init --auto
          sudo iptables -P FORWARD ACCEPT
      - name: Import rockcraft container cache
        if: steps.rockcraft-cache.outputs.cache-hit == 'true'
        working-directory: ${{ inputs.working-directory }}
        run: |
          sudo lxc project create rockcraft -c features.images=false -c features.profiles=false
          sudo lxc --project rockcraft import ~/.rockcraft-cache/${{ env.IMAGE_NAME }}.tar ${{ env.ROCKCRAFT_CONTAINER_NAME }}
          find . -exec touch '{}' ';'
      - name: Build rock
        if: steps.rock-cache.outputs.cache-hit != 'true' || inputs.cache-action == 'save'
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: ${{ matrix.path }}
      - name: Generate rockcraft container cache
        if: inputs.cache-action == 'save'
        run: |
          mkdir -p ~/.rockcraft-cache
          mkdir -p ~/.rock-cache
          touch ~/.rock-cache/.gitkeep
          sudo lxc --project rockcraft export ${{ env.ROCKCRAFT_CONTAINER_NAME }} --compression none ~/.rockcraft-cache/${{ env.IMAGE_NAME }}.tar
      - name: Delete rockcraft container cache
        if: inputs.cache-action == 'save'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/caches?key=$(printf %s "${{ env.ROCKCRAFT_CACHE_KEY }}"|jq -sRr @uri) || :
          for key in $(echo $ROCKCRAFT_CACHE_ALT_KEYS)
            do gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/actions/caches?key=$(printf %s "$key"|jq -sRr @uri) || :
          done
      - name: Save rockcraft container cache
        if: inputs.cache-action == 'save'
        uses: actions/cache/save@v3.3.2
        with:
          path: ~/.rockcraft-cache/
          key: ${{ env.ROCKCRAFT_CACHE_KEY }}
      - name: Delete rock cache
        if: inputs.cache-action == 'save'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/caches?key=$(printf %s "${{ env.ROCKC_CACHE_KEY }}"|jq -sRr @uri) || :
          for key in $(echo $ROCK_CACHE_ALT_KEYS)
            do gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/actions/caches?key=$(printf %s "$key"|jq -sRr @uri) || :
          done
      - name: Save rock cache
        if: inputs.cache-action == 'save'
        uses: actions/cache/save@v3.3.2
        with:
          path: ~/.rock-cache
          key: ${{ env.ROCK_CACHE_KEY }}
      - name: Upload rock to ghcr.io
        if: steps.rock-cache.outputs.cache-hit != 'true' || inputs.cache-action == 'save'
        run: |
          skopeo --insecure-policy copy oci-archive:$(ls "${{ matrix.path }}"/*.rock) docker://$IMAGE_REF --dest-creds "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}"
      - name: Run Github Trivy Image Action
        uses: aquasecurity/trivy-action@0.13.0
        if: steps.rock-cache.outputs.cache-hit != 'true' || inputs.cache-action == 'save'
        with:
          image-ref: ${{ env.IMAGE_REF }}
          trivy-config: ${{ inputs.trivy-image-config }}
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      - name: Check trivyignore
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.46.0
          if [ -f ".trivyignore" ]
          then
            output=$(trivy image $ROCK_IMAGE --severity HIGH,CRITICAL -q -f json --ignorefile "" | jq -r '.Results[].Vulnerabilities[].VulnerabilityID' 2>/dev/null || echo "No vulnerabilities found")
            line=0
            while read CVE;
            do
              line=$(( line + 1 ))
              if [[ "$output" != *"$CVE"* ]] && [[ ! "$CVE" =~ ^#.* ]]
              then
              echo "::notice file=.trivyignore,line=${line}::$CVE not present anymore, can be safely removed."
              fi
            done < .trivyignore
          fi
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          ROCK_IMAGE: ${{ env.IMAGE_REF }}
