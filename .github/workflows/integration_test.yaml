name: Integration tests

on:
  workflow_call:
    inputs:
      extra-arguments:
        description: Additional arguments to pass to the integration test execution
        type: string
      pre-run-script:
        description: Path to the bash script to be run before the integration and load tests
        type: string
      provider:
        description: Actions operator provider as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: microk8s
      series:
        description: List of series to run the tests in JSON format, i.e. '["jammy", "focal"]'. Each element will be passed to pytest through tox as --series argument
        type: string
        default: '[""]'
      modules:
        description: List of testing modules to run the tests in JSON format, i.e. '["foo", "bar"]'. Each element will be passed to pytest through tox as -k argument
        type: string
        default: '[""]'
      setup-devstack-swift:
        description: Use setup-devstack-swift action to prepare a swift server for testing.
        type: boolean
        default: false
      chaos-enabled:
        type: boolean
        description: Whether Chaos testing is enabled
        default: false
      chaos-experiments:
        type: string
        description: List of experiments to run
        default: ""
      chaos-namespace:
        type: string
        description: Namespace to install Litmus Chaos
        default: testing
      chaos-app-namespace:
        type: string
        description: Namespace of chaos tested application
        default: testing
      chaos-app-label:
        type: string
        description: Label for chaos selection
        default: ""
      chaos-app-kind:
        type: string
        description: Application kind
        default: statefulset
    outputs:
      images:
        description: Pushed docker images
        value: ${{ jobs.build-images.outputs.images }}

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  get-runner-image:
    name: Get runner image
    uses: ./.github/workflows/common/get_runner_image.yaml
  build-images:
    name: Build image
    needs: get-runner-image
    uses: ././.github/workflows/common/build_images.yaml
    with:
      runs-on: ${{ needs.get-runner-image.outputs.runs-on }}
  integration-test:
    name: Integration tests
    strategy:
      matrix:
        series: ${{ fromJSON(inputs.series) }}
        modules: ${{ fromJSON(inputs.modules) }}
      fail-fast: false
    runs-on: ${{ needs.get-runner-image.outputs.runs-on }}
    needs: [get-runner-image, build-images]
    if: ${{ !failure() }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up environment
        uses: .github/common/set_up_run_environment
        with:
          images: ${{ needs.build-images.outputs.images }}
          pre-run-script: ${{ inputs.pre-run-script }}
          provider: ${{ inputs.provider }}
          setup-devstack-swift: ${{ inputs.setup-devstack-swift }}
      - name: Run integration tests
        run: |
          echo "CHARM_NAME=$([ -f metadata.yaml ] && yq '.name' metadata.yaml || echo UNKNOWN)" >> $GITHUB_ENV
          args=""
          for image_name in $(echo '${{ needs.build-images.outputs.images }}' | jq -cr '.[]'); do
            if [ ${{ github.event.pull_request.head.repo.fork }} = "true" ]; then
              args="${args} --${image_name}-image localhost:32000/${image_name}:latest"
            else
              args="${args} --${image_name}-image ${{ env.REGISTRY }}/${{ env.OWNER }}/${image_name}:${{ github.run_id }}"
            fi
          done

          series=""
          if [ ! -z ${{ matrix.series }} ]; then
            series="--series ${{ matrix.series }}"
          fi
          module=""
          if [ ! -z ${{ matrix.modules }} ]; then
            module="-k ${{ matrix.modules }}"
          fi
          tox -e integration -- --model testing --keep-models $series $module $args ${{ inputs.extra-arguments }}
      - name: Dump logs
        uses: canonical/charm-logdump-action@main
        if: failure()
        with:
          app: ${{ env.CHARM_NAME }}
          model: testing
      - name: Setting up kubeconfig ENV for Github Chaos Action
        if: ${{ inputs.chaos-enabled }}
        run: echo ::set-env name=KUBE_CONFIG_DATA::$(sudo microk8s config | base64 -w 0)
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Setup Litmus
        if: ${{ inputs.chaos-enabled }}
        uses: merkata/github-chaos-actions@master
        env:
          INSTALL_LITMUS: true
          CHAOS_NAMESPACE: ${{ inputs.chaos-namespace }}
          APP_NS: ${{ inputs.chaos-app-namespace }}

      - name: Run Litmus Chaos experiments
        uses: merkata/github-chaos-actions@feat/run-multiple-scenarios
        env:
          EXPERIMENT_NAME: ${{ inputs.chaos-experiments }}
          CHAOS_NAMESPACE: ${{ inputs.chaos-namespace }}
          APP_NS: ${{ inputs.chaos-app-namespace }}
          APP_LABEL: ${{ inputs.chaos-app-label }}
          APP_KIND: ${{ inputs.chaos-app-kind }}
