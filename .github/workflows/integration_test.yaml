# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

name: Integration tests

on:
  workflow_call:
    inputs:
      chaos-app-kind:
        type: string
        description: Application kind
        default: statefulset
      chaos-app-label:
        type: string
        description: Label for chaos selection
        default: ""
      chaos-app-namespace:
        type: string
        description: Namespace of chaos tested application
        default: testing
      chaos-duration:
        type: string
        description: |
          Duration of the chaos experiment (added to 600s for go test timeout)
        default: 60
      chaos-enabled:
        type: boolean
        description: Whether Chaos testing is enabled
        default: false
      chaos-experiments:
        type: string
        description: List of experiments to run
        default: ""
      chaos-interval:
        type: string
        description: Interval to attempt re-run of an experiment
        default: 30
      chaos-namespace:
        type: string
        description: Namespace to install Litmus Chaos
        default: testing
      chaos-status-delay:
        type: string
        description: Delay is the wait(sleep) time on every status retry
        default: 5
      chaos-status-duration:
        type: string
        description: |
          Duration used for status check retries
          Retry is chaos-duration/chaos-delay times and each retry
          sleeps chaos-delay
        default: 90
      extra-arguments:
        description: Additional arguments to pass to the integration test execution
        type: string
      extra-test-matrix:
        description: |
          Aditional mapping to lists of matrices to be applied on top of series and modules matrix in JSON format, i.e. '{"extras":["foo","bar"]}'.
          Each mapping will be injected into the matrix section of the integration-test.
        type: string
        default: '{}'
      image-build-args:
        description: |
          List of build args to pass to the build image job.
        type: string
        default: ""
      load-test-enabled:
        type: boolean
        description: Whether load testing is enabled
        default: false
      load-test-run-args:
        type: string
        description: Command line arguments for the load test execution
        default: ""
      modules:
        description: List of testing modules to run the tests in JSON format, i.e. '["foo", "bar"]'. Each element will be passed to pytest through tox as -k argument
        type: string
        default: '[""]'
      pre-run-script:
        description: Path to the bash script to be run before the integration tests
        type: string
      provider:
        description: Actions operator provider as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: microk8s
      microk8s-addons:
        description: Microk8s provider add-ons override. A minimum set of addons (the defaults) must be enabled.
        type: string
        default: "storage dns rbac"
      channel:
        description: Actions operator provider channel as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: latest/stable
      juju-channel:
        description: Actions operator juju channel as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: 2.9/stable
      series:
        description: List of series to run the tests in JSON format, i.e. '["jammy", "focal"]'. Each element will be passed to pytest through tox as --series argument
        type: string
        default: '[""]'
      setup-devstack-swift:
        description: Use setup-devstack-swift action to prepare a swift server for testing.
        type: boolean
        default: false
      tmate-debugging:
        description: Use tmate debugging session on failure.
        type: boolean
        default: false
      trivy-fs-config:
        type: string
        description: Trivy YAML configuration for fs testing that is checked in as part of the repo
      trivy-fs-enabled:
        type: boolean
        description: Whether Trivy testing of type fs is enabled
        default: false
      trivy-fs-ref:
        type: string
        description: Target directory to do the Trivy testing
        default: "."
      trivy-image-config:
        type: string
        description: Trivy YAML configuration for image testing that is checked in as part of the repo
      working-directory:
        type: string
        description: The working directory for jobs
        default: "./"
      zap-auth-header:
        description: If this is defined then its value will be added as a header to all of the ZAP requests
        type: string
      zap-auth-header-value:
        description:  If this is defined then its value will be used as the header name to all of the ZAP requests
        type: string
      zap-before-command:
        description: Command to run before ZAP testing
        type: string
      zap-cmd-options:
        description: Options to be used by ZAP
        type: string
        default: "-T 60"
      zap-enabled:
        type: boolean
        description: Whether ZAP testing is enabled
        default: false
      zap-target:
        description:  If this is not set, the unit IP address will be used as ZAP target
        type: string
      zap-target-port:
        description:  ZAP target port
        type: string
        default: 80
      zap-target-protocol:
        description:  ZAP target protocol
        type: string
        default: "http"
      zap-rules-file-name:
        description: Rules file to ignore any alerts from the ZAP scan
        type: string
    outputs:
      images:
        description: Pushed images
        value: ${{ jobs.all-images.outputs.images }}

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

concurrency:
  group: operator-workflows-${{ github.workflow }}-integration-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-runner-image:
    name: Get runner image
    uses: ./.github/workflows/get_runner_image.yaml
    with:
      working-directory: ${{ inputs.working-directory }}
  build-images:
    name: Build image
    uses: ./.github/workflows/build_images.yaml
    needs: get-runner-image
    with:
      owner: ${{ github.repository_owner }}
      registry: ghcr.io
      runs-on: ${{ needs.get-runner-image.outputs.runs-on }}
      trivy-image-config: ${{ inputs.trivy-image-config }}
      working-directory: ${{ inputs.working-directory }}
      build-args: ${{ inputs.image-build-args }}
  build-rocks:
    name: Build rock
    uses: ./.github/workflows/build_rocks.yaml
    needs: get-runner-image
    with:
      owner: ${{ github.repository_owner }}
      registry: ghcr.io
      runs-on: ${{ needs.get-runner-image.outputs.runs-on }}
      trivy-image-config: ${{ inputs.trivy-image-config }}
      working-directory: ${{ inputs.working-directory }}
  all-images:
    name: Get rocks or Docker images
    needs: [build-images, build-rocks]
    runs-on: ubuntu-latest
    outputs:
      images: ${{ env.IMAGES }}
    steps:
      - name: Get rocks or fallback to Docker images
        run: |
          if [ ${{ needs.build-rocks.outputs.images != '[]' }} = true ]; then
            IMAGES='${{ needs.build-rocks.outputs.images }}'
          else
            IMAGES='${{ needs.build-images.outputs.images }}'
          fi
          echo $IMAGES
          echo "IMAGES=$IMAGES" >> $GITHUB_ENV
  integration-test:
    name: Integration tests
    uses: ./.github/workflows/integration_test_run.yaml
    needs: [get-runner-image, all-images]
    if: ${{ !failure() }}
    with:
      chaos-app-kind: ${{ inputs.chaos-app-kind }}
      chaos-app-label: ${{ inputs.chaos-app-label }}
      chaos-app-namespace: ${{ inputs.chaos-app-namespace }}
      chaos-duration: ${{ inputs.chaos-duration }}
      chaos-enabled: ${{ inputs.chaos-enabled }}
      chaos-experiments: ${{ inputs.chaos-experiments }}
      chaos-interval: ${{ inputs.chaos-interval }}
      chaos-namespace: ${{ inputs.chaos-namespace }}
      chaos-status-delay: ${{ inputs.chaos-status-delay }}
      chaos-status-duration: ${{ inputs.chaos-status-duration }}
      extra-arguments: ${{ inputs.extra-arguments }}
      extra-test-matrix: ${{ inputs.extra-test-matrix }}
      images: ${{ needs.all-images.outputs.images }}
      load-test-enabled: ${{ inputs.load-test-enabled }}
      load-test-run-args: ${{ inputs.load-test-run-args }}
      modules: ${{ inputs.modules }}
      owner: ${{ github.repository_owner }}
      pre-run-script: ${{ inputs.pre-run-script }}
      provider: ${{ inputs.provider }}
      microk8s-addons: ${{ inputs.microk8s-addons }}
      channel: ${{ inputs.channel }}
      juju-channel: ${{ inputs.juju-channel }}
      registry: ghcr.io
      runs-on: ${{ needs.get-runner-image.outputs.runs-on }}
      series: ${{ inputs.series }}
      setup-devstack-swift: ${{ inputs.setup-devstack-swift }}
      tmate-debugging: ${{ inputs.tmate-debugging }}
      trivy-fs-config: ${{ inputs.trivy-fs-config }}
      trivy-fs-enabled: ${{ inputs.trivy-fs-enabled }}
      trivy-fs-ref: ${{ inputs.trivy-fs-ref }}
      working-directory: ${{ inputs.working-directory }}
      zap-auth-header: ${{ inputs.zap-auth-header }}
      zap-auth-header-value: ${{ inputs.zap-auth-header-value }}
      zap-before-command: ${{ inputs.zap-before-command }}
      zap-cmd-options: ${{ inputs.zap-cmd-options }}
      zap-enabled: ${{ inputs.zap-enabled }}
      zap-target: ${{ inputs.zap-target }}
      zap-target-port: ${{ inputs.zap-target-port }}
      zap-target-protocol: ${{ inputs.zap-target-protocol }}
      zap-rules-file-name: ${{ inputs.zap-rules-file-name }}
  required_status_checks:
    name: Required Integration Test Status Checks
    runs-on: ubuntu-latest
    needs:
      - integration-test
    if: always()
    steps:
      - run: |
          [ '${{ needs.integration-test.result }}' = 'success' ] || (echo integration-test failed && false)
