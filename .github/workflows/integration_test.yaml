name: Integration tests

on:
  workflow_call:
    inputs:
      extra-arguments:
        description: Additional arguments to pass to the integration tests step
        type: string
      pre-run-script:
        description: Path to the bash script to be run before the integration tests
        type: string
      provider:
        description: Actions operator provider as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: microk8s
      runs-on:
        description: Runner image for the integration tests
        type: string
        default: ubuntu-20.04
      series:
        description: List of series to run the tests in JSON format, i.e. '["jammy", "focal"]'. Each element will be passed to tox as --series argument
        type: string
        default: '[""]'
    outputs:
      images:
        description: Pushed docker images
        value: ${{ jobs.get-images.outputs.images }}

env:
  REGISTRY: ghcr.io

jobs:
  get-repo-owner:
    name: Get repository owner
    runs-on: ubuntu-20.04
    outputs:
      owner: ${{ env.HEAD_REPO_OWNER }}
    steps:
      - uses: actions/checkout@v3
      - name: Get dockerfiles
        run: |
          owner=${{ github.repository_owner }}
          if [[ github.event.workflow_run.event == 'pull_request' ]]; then
            owner=${{ github.event.pull_request.head.repo.owner.login }}
          fi
          echo "HEAD_REPO_OWNER=$owner" >> $GITHUB_ENV
  get-images:
    name: Get images
    runs-on: ubuntu-20.04
    outputs:
      images: ${{ env.DOCKER_IMAGES }}
    steps:
      - uses: actions/checkout@v3
      - name: Get dockerfiles
        id: set-images
        run: |
          images=$(ls *.Dockerfile 2> /dev/null | sed s/\.Dockerfile// |  jq -Rsc '. / "\n" - [""]')
          echo "DOCKER_IMAGES=$images" >> $GITHUB_ENV
  build-images:
    name: Build image
    runs-on: ubuntu-20.04
    needs: [get-images, get-repo-owner]
    if: ${{ needs.get-images.outputs.images != '[]' }}
    strategy:
      matrix:
        image: ${{ fromJSON(needs.get-images.outputs.images) }}
    steps:
      - uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ needs.get-repo-owner.outputs.owner }}/${{ matrix.image }}:${{ github.run_id }}
          file: ${{ matrix.image }}.Dockerfile

  integration-test:
    name: Integration tests
    strategy:
      matrix:
        series: ${{ fromJSON(inputs.series) }}
      fail-fast: false
    runs-on: ${{ inputs.runs-on }}
    needs: [get-images, get-repo-owner, build-images]
    if: ${{ !failure() }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: ${{ inputs.provider }}
      - name: Configure GHCR in microk8s
        if: ${{ inputs.provider == 'microk8s' }}
        run: |
          # Adding authentication for ghcr.io for containerd as per https://microk8s.io/docs/registry-private
          # Note: containerd has to be restarted for the changes to take effect
          # (https://github.com/containerd/cri/blob/master/docs/registry.md)
          sudo su -c 'echo "
          [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"ghcr.io\".auth]
          username = \"${{ github.actor }}\"
          password = \"${{ secrets.GITHUB_TOKEN }}\"
          " >> /var/snap/microk8s/current/args/containerd-template.toml'
          sudo su -c 'systemctl restart snap.microk8s.daemon-containerd.service && microk8s status --wait-ready'
      - name: Pre-run script
        if: ${{ inputs.pre-run-script != '' }}
        run: bash ${{ inputs.pre-run-script }}
      - name: Run integration tests
        run: |
          echo "CHARM_NAME=$(yq '.name' metadata.yaml)" >> $GITHUB_ENV
          args=""
          for image_name in $(echo '${{ needs.get-images.outputs.images }}' | jq -cr '.[]'); do
            args="${args} --${image_name}-image ${{ env.REGISTRY }}/${{ needs.get-repo-owner.outputs.owner }}/${image_name}:${{ github.run_id }}"
          done

          series=""
          if [ ! -z ${{ matrix.series }} ]; then
            series="--series ${{ matrix.series }}"
          fi
          tox -e integration -- --model testing $series $args ${{ inputs.extra-arguments }}
      - name: Dump logs
        uses: canonical/charm-logdump-action@main
        if: failure()
        with:
          app: ${{ env.CHARM_NAME }}
          model: testing
