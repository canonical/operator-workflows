# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

name: Run integration tests

on:
  workflow_call:
    inputs:
      channel:
        description: Actions operator provider channel as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: latest/stable
      extra-arguments:
        description: Additional arguments to pass to the integration test execution
        type: string
      extra-test-matrix:
        description: |
          Aditional mapping to lists of matrices to be applied on top of series and modules matrix in JSON format, i.e. '{"extras":["foo","bar"]}'.
          Each mapping will be injected into the matrix section of the integration-test.
        type: string
        default: "{}"
      juju-channel:
        description: Actions operator juju channel as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: 2.9/stable
      load-test-enabled:
        type: boolean
        description: Whether load testing is enabled
        default: false
      load-test-run-args:
        type: string
        description: Command line arguments for the load test execution
        default: ""
      modules:
        description: List of testing modules to run the tests in JSON format, i.e. '["foo", "bar"]'. Each element will be passed to pytest through tox as -k argument
        type: string
        default: '[""]'
      owner:
        type: string
        description: Registry owner to push the built images
        default: ""
      plan:
        type: string
        description: Plan generated by integration test planner.
      pre-run-script:
        description: Path to the bash script to be run before the integration tests
        type: string
      provider:
        description: Actions operator provider as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: microk8s
      python-version:
        type: string
        required: false
        description: Python version to use when installing tox
        default: ""
      microk8s-addons:
        description: Microk8s provider add-ons override. A minimum set of addons (the defaults) must be enabled.
        type: string
        default: "dns ingress rbac storage"
      registry:
        type: string
        description: Registry to push the built images
        default: ""
      runs-on:
        type: string
        description: Image of the runner to run the test job. This gets ignored if self-hosted-runner is set to true.
        default: ubuntu-22.04
      self-hosted-runner:
        type: boolean
        description: Whether to use self-hosted runners to run the jobs.
        default: true
      self-hosted-runner-arch:
        type: string
        description: Architecture to use on self-hosted runners to run the jobs.
        default: "x64"
      self-hosted-runner-image:
        type: string
        description: Image of the requested runner. Supports only 'jammy' or 'noble'.
        default: "jammy"
      self-hosted-runner-label:
        type: string
        description: Label for selecting the self-hosted runners.
        default: "large"
      series:
        description: List of series to run the tests in JSON format, i.e. '["jammy", "focal"]'. Each element will be passed to pytest through tox as --series argument
        type: string
        default: '[""]'
      setup-devstack-swift:
        description: Use setup-devstack-swift action to prepare a swift server for testing.
        type: boolean
        default: false
      test-timeout:
        description: Timeout in minutes for the integration test.
        type: number
        default: 360
      test-tox-env:
        description: The tox environment name for the integration test.
        type: string
        default: "integration"
      tmate-debug:
        description: Use tmate debugging session on integration test failure.
        type: boolean
        default: false
      tmate-timeout:
        description: Timeout in minutes to keep tmate debugging session.
        type: number
        default: 30
      trivy-fs-config:
        type: string
        description: Trivy YAML configuration for fs testing that is checked in as part of the repo
      trivy-fs-enabled:
        type: boolean
        description: Whether Trivy testing of type fs is enabled
        default: false
      trivy-fs-ref:
        type: string
        description: Target directory to do the Trivy testing
        default: "."
      use-canonical-k8s:
        type: boolean
        description: (Experimental) Whether to use canonical k8s instead of microk8s
        default: false
      with-uv:
        type: boolean
        description: Whether to use tox with uv
        required: false
        default: false
      working-directory:
        type: string
        description: The working directory for jobs
        default: "./"
      zap-auth-header:
        description: If this is defined then its value will be added as a header to all of the ZAP requests
        type: string
      zap-auth-header-value:
        description: If this is defined then its value will be used as the header name to all of the ZAP requests
        type: string
      zap-before-command:
        description: Command to run before ZAP testing
        type: string
      zap-cmd-options:
        description: Options to be used by ZAP
        type: string
        default: "-T 60"
      zap-enabled:
        type: boolean
        description: Whether ZAP testing is enabled
        default: false
      zap-target:
        description: If this is not set, the unit IP address will be used as ZAP target
        type: string
      zap-target-port:
        description: ZAP target port
        type: string
        default: '80'
      zap-target-protocol:
        description: ZAP target protocol
        type: string
        default: "http"
      zap-rules-file-name:
        description: Rules file to ignore any alerts from the ZAP scan
        type: string

jobs:
  integration-test:
    name: Integration tests
    timeout-minutes: ${{ inputs.test-timeout }}
    strategy:
      matrix:
        series: ${{ fromJSON(inputs.series) }}
        modules: ${{ fromJSON(inputs.modules) }}
        ${{ insert }}: ${{ fromJSON(inputs.extra-test-matrix) }}
      fail-fast: false
    runs-on: >-
      ${{
        inputs.self-hosted-runner &&
        fromJson(format('[''self-hosted'', ''{0}'', ''{1}'', ''{2}'']',
          inputs.self-hosted-runner-arch, inputs.self-hosted-runner-label, inputs.self-hosted-runner-image
        )) || inputs.runs-on
      }}
    env:
      python-version: >-
        ${{
          inputs.python-version ||
          inputs.self-hosted-runner &&
          (
            inputs.self-hosted-runner-image == 'noble' && '3.12' ||
            inputs.self-hosted-runner-image == 'jammy' && '3.10' ||
            inputs.self-hosted-runner-image == 'focal' && '3.8'
          ) ||
          '3.10'
        }}
    steps:
      - name: Disable snap autorefresh
        run: sudo snap refresh --hold=2h
      - name: Wait for last autorefresh
        run: sudo snap watch --last=auto-refresh?
        timeout-minutes: 10
      - uses: actions/checkout@v4.2.2
      - name: Integration tests variable setting
        shell: python
        run: |
          import os
          import re
          import uuid
          
          def safe(s):
              return re.sub('[^0-9a-zA-Z-_]+', '-', s)
          
          GITHUB_ENV_FILE = open(os.environ["GITHUB_ENV"], "a")
          
          series = """${{ matrix.series }}"""
          module = """${{ matrix.modules }}"""
          unique_artifact_suffix = str(uuid.uuid4())
          if series:
              unique_artifact_suffix += "-{safe(series)}"
              series = "--series {matrix.series}"
          if module:
              unique_artifact_suffix += "-{safe(module)}"
              module = "-k '{module}'"
          
          GITHUB_ENV_FILE.write(f"SERIES={series}\n")
          GITHUB_ENV_FILE.write(f"MODULE={module}\n")
          GITHUB_ENV_FILE.write(f"UNIQUE_ARTIFACT_SUFFIX={unique_artifact_suffix}\n")
          
          GITHUB_ENV_FILE.close()
      - name: Setup Astral UV
        if: ${{ inputs.with-uv }}
        uses: astral-sh/setup-uv@v6.1.0
        with:
          python-version: ${{ env.python-version }}
      - name: Install tox with UV
        if: ${{ inputs.with-uv }}
        run: uv tool install tox --with tox-uv
      - name: Install tox
        if: ${{ ! inputs.with-uv }}
        run: |
          if which tox &> /dev/null; then
            echo "tox is already installed."
            tox --version
          fi

          pip_path=$(which pip 2>/dev/null)
          SYSTEM_PIP_PATH="/usr/bin/pip"
          if [ -n "$pip_path" ] && [ "$pip_path" != "$SYSTEM_PIP_PATH" ]; then
              echo "Pip is available and not system-managed. Installing tox"
              pip install tox
          fi

          if which pipx &> /dev/null; then
              echo "Pipx is available. Installing tox"
              pipx install tox
          fi

          echo "Neither pip nor pipx are available. Installing pipx via apt..."
          sudo apt-get update -yqq
          sudo apt-get install -yqq pipx
          pipx ensurepath
          sudo pipx ensurepath

          echo "Installing tox with pipx..."
          pipx install tox
      - name: Check Allure
        working-directory: ${{ inputs.working-directory }}
        run: |
          tox -e ${{ inputs.test-tox-env }} --notest --list-dependencies 2>&1
          tox -e ${{ inputs.test-tox-env }} --notest --list-dependencies 2>&1 | grep -q allure \
            && echo 'ENABLE_ALLURE=true' >> $GITHUB_ENV \
            || echo 'ENABLE_ALLURE=false' >> $GITHUB_ENV
      - name: Collect tests for Allure
        if: env.ENABLE_ALLURE == 'true'
        working-directory: ${{ inputs.working-directory }}
        run: |
          tox -e ${{ inputs.test-tox-env }} -- --keep-models ${{ env.SERIES }} ${{ env.MODULE }} --allure-collection-dir=allure-default ${{ inputs.extra-arguments }} ${{ secrets.INTEGRATION_TEST_ARGS }}
      - name: Upload Default Allure results
        if: env.ENABLE_ALLURE == 'true' && github.run_attempt == '1'
        timeout-minutes: 3
        uses: actions/upload-artifact@v4
        with:
          name: allure-fallback-results-${{ env.UNIQUE_ARTIFACT_SUFFIX }}
          path: ${{ inputs.working-directory }}allure-default/
      - name: Setup Canonical k8s
        if: inputs.use-canonical-k8s && inputs.provider == 'k8s'
        id: canonical-k8s
        run: |
          sudo snap install k8s --channel=${{ inputs.channel }} --classic
          
          cat << EOF | sudo k8s bootstrap --file -
          containerd-base-dir: /opt/containerd
          EOF

          # Note: the previous --file arguments override the default bootstrap options
          #       resulting in the following not being enabled by default
          sudo k8s enable network dns load-balancer local-storage gateway
          sudo k8s status --wait-ready --timeout 5m

          mkdir -p ~/.kube
          sudo k8s config > ~/.kube/config
          echo "kubeconfig=$(sudo k8s config | base64 -w 0)" >> $GITHUB_OUTPUT
          
          IPADDR=$(ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc')
          LB_FIRST_ADDR="$(echo "${IPADDR}" | awk -F'.' '{print $1,$2,$3,100}' OFS='.')"
          LB_LAST_ADDR="$(echo "${IPADDR}" | awk -F'.' '{print $1,$2,$3,255}' OFS='.')"
          LB_ADDR_RANGE="${LB_FIRST_ADDR}-${LB_LAST_ADDR}"
          sudo k8s set load-balancer.cidrs=$LB_ADDR_RANGE load-balancer.enabled=true load-balancer.l2-mode=true
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: ${{ inputs.provider }}
          credentials-yaml: ${{ steps.canonical-k8s.outputs.kubeconfig }}
          microk8s-addons: >-
            ${{
              ( 
                github.event.pull_request.head.repo.full_name != github.repository && 
                !contains(inputs.microk8s-addons, 'registry')
              ) &&
              (
                inputs.microk8s-addons == '' && 
                'registry' || 
                format('registry {0}', inputs.microk8s-addons)
              ) ||
              inputs.microk8s-addons
            }}
          channel: ${{ inputs.channel }}
          juju-channel: ${{ inputs.juju-channel }}
      - uses: actions/checkout@v4.2.2
      - name: Remove Android SDK
        run: sudo rm -rf /usr/local/lib/android
      - name: Setup Devstack Swift
        if: ${{ inputs.setup-devstack-swift }}
        id: setup-devstack-swift
        uses: canonical/setup-devstack-swift@v1
      - name: Create OpenStack credential file
        working-directory: ${{ inputs.working-directory }}
        run: echo "${{ steps.setup-devstack-swift.outputs.credentials }}" > openrc
      - name: Configure GHCR in microk8s
        if: ${{ inputs.provider == 'microk8s' }}
        run: |
          # Adding authentication for ghcr.io for containerd as per https://microk8s.io/docs/registry-private
          # Note: containerd has to be restarted for the changes to take effect
          # (https://github.com/containerd/cri/blob/master/docs/registry.md)
          sudo su -c 'echo "
          [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"ghcr.io\".auth]
          username = \"${{ github.actor }}\"
          password = \"${{ secrets.GITHUB_TOKEN }}\"
          " >> /var/snap/microk8s/current/args/containerd-template.toml'
          sudo su -c 'systemctl restart snap.microk8s.daemon-containerd.service && microk8s status --wait-ready'
      - name: Pre-run script
        if: ${{ inputs.pre-run-script != '' }}
        run: bash -xe ${{ inputs.pre-run-script }}
        # pre-run-script can be used to bootstrap private-endpoints.
        # map the secrets related to private-endpoints as environment variables.
        env:
          JUJU_CONTROLLER: ${{ secrets.JUJU_CONTROLLER }}
          JUJU_MODEL: ${{ secrets.JUJU_MODEL }}
          PRODSTACK: ${{ secrets.PRODSTACK }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_APPROLE_ROLE_ID: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
          VAULT_APPROLE_SECRET_ID: ${{ secrets.VAULT_APPROLE_SECRET_ID }}

      - run: sudo apt install skopeo -y
      - name: Plan Integration
        uses: canonical/operator-workflows/internal/plan-integration@main
        id: plan-integration
        with:
          plan: ${{ inputs.plan }}
      - name: Charm name setting
        working-directory: ${{ inputs.working-directory }}/${{ inputs.charm-directory }}
        run: |
          CHARM_NAME="$([ -f metadata.yaml ] && yq '.name' metadata.yaml || echo UNKNOWN)"
          if [ "$CHARM_NAME" == "UNKNOWN" ]; then
            CHARM_NAME="$([ -f charmcraft.yaml ] && yq '.name' charmcraft.yaml || echo UNKNOWN)"
          fi
          echo "CHARM_NAME=$CHARM_NAME" >> $GITHUB_ENV

          args="${{ steps.plan-integration.outputs.args }}"
          echo "ARGS=$args" >> $GITHUB_ENV
      - name: Run k8s integration tests
        working-directory: ${{ inputs.working-directory }}
        if: inputs.provider == 'microk8s' || inputs.provider == 'k8s'
        run: |
          [ -n "${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME }}" ] && export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE }}" || :
          [ -n "${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_1 }}" ] && export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_1 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_1 }}" || :
          [ -n "${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_2 }}" ] && export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_2 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_2 }}" || :
          [ -n "${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_3 }}" ] && export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_3 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_3 }}" || :
          [ -n "${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_4 }}" ] && export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_4 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_4 }}" || :
          [ -n "${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_5 }}" ] && export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_5 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_5 }}" || :
          if [ "$ENABLE_ALLURE" == "true" ]; then
            tox -e ${{ inputs.test-tox-env }} -- --model testing --keep-models ${{ env.SERIES }} ${{ env.MODULE }} ${{ env.ARGS }} --alluredir=allure-results ${{ inputs.extra-arguments }} ${{ secrets.INTEGRATION_TEST_ARGS }} 
          else
            tox -e ${{ inputs.test-tox-env }} -- --model testing --keep-models ${{ env.SERIES }} ${{ env.MODULE }} ${{ env.ARGS }} ${{ inputs.extra-arguments }} ${{ secrets.INTEGRATION_TEST_ARGS }} 
          fi
      - name: Run lxd integration tests
        working-directory: ${{ inputs.working-directory }}
        if: ${{ inputs.provider == 'lxd' }}
        run: |
          export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE }}" || :
          export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_1 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_1 }}" || :
          export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_2 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_2 }}" || :
          export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_3 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_3 }}" || :
          export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_4 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_4 }}" || :
          export ${{ vars.INTEGRATION_TEST_SECRET_ENV_NAME_5 }}="${{ secrets.INTEGRATION_TEST_SECRET_ENV_VALUE_5 }}" || :
          if [ "$ENABLE_ALLURE" == "true" ]; then
            tox -e ${{ inputs.test-tox-env }} -- --keep-models ${{ env.SERIES }} ${{ env.MODULE }} ${{ env.ARGS }} --alluredir=allure-results ${{ inputs.extra-arguments }} ${{ secrets.INTEGRATION_TEST_ARGS }}
          else
            tox -e ${{ inputs.test-tox-env }} -- --keep-models ${{ env.SERIES }} ${{ env.MODULE }} ${{ env.ARGS }} ${{ inputs.extra-arguments }} ${{ secrets.INTEGRATION_TEST_ARGS }}
          fi
      - name: Upload Allure results
        timeout-minutes: 3
        if: env.ENABLE_ALLURE == 'true' && always() && !cancelled() && github.run_attempt == '1'
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ env.UNIQUE_ARTIFACT_SUFFIX }}
          path: ${{ inputs.working-directory }}allure-results/
      - name: Tmate debugging session (self-hosted)
        if: ${{ failure() && (inputs.tmate-debug || runner.debug) && inputs.self-hosted-runner }}
        uses: canonical/action-tmate@main
        timeout-minutes: ${{ inputs.tmate-timeout }}
      - name: Tmate debugging session (gh-hosted)
        if: ${{ failure() && (inputs.tmate-debug || runner.debug) && !inputs.self-hosted-runner }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: ${{ inputs.tmate-timeout }}
      - name: Dump logs
        uses: canonical/charm-logdump-action@main
        if: failure()
        with:
          app: ${{ env.CHARM_NAME }}
          model: testing
      - name: Juju debug-log
        if: failure()
        run: |
          juju models
          for model in $(juju models --format json | jq -r '.models[].name')
          do
            echo ==== debug-log in model: $model
            juju debug-log --replay --no-tail -m $model
          done
      - name: Install k6s
        if: ${{ inputs.load-test-enabled }}
        run: sudo snap install k6
      - name: Run k6 load tests
        if: ${{ inputs.load-test-enabled }}
        run: k6 run load_tests/load-test.js ${{ inputs.load-test-run-args }}
      - name: Run Github Trivy FS Action
        if: ${{ inputs.trivy-fs-enabled }}
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: "fs"
          scan-ref: ${{ inputs.trivy-fs-ref }}
          trivy-config: ${{ inputs.trivy-fs-config }}
        env:
          TRIVY_DISABLE_VEX_NOTICE: true
      - name: Set Zap target env for Github Zap Action to Juju Unit IP Address
        if: ${{ inputs.zap-enabled && inputs.zap-target == '' }}
        run: echo "ZAP_TARGET=$(juju show-unit ${{ env.CHARM_NAME }}/0 --format=json | jq -r '.["${{ env.CHARM_NAME }}/0"]["address"]')" >> $GITHUB_ENV
      - name: Set Zap target env for Github Zap Action to zap-target value
        if: ${{ inputs.zap-enabled && inputs.zap-target != '' }}
        run: echo "ZAP_TARGET=${{ inputs.zap-target }}" >> $GITHUB_ENV
      - name: Run command before Github Zap Action
        if: ${{ inputs.zap-enabled && inputs.zap-before-command != '' }}
        run: ${{ inputs.zap-before-command }}
        env:
          ZAP_TARGET: ${{ env.ZAP_TARGET }}
      - name: Run Github Zap Action
        if: ${{ inputs.zap-enabled }}
        uses: zaproxy/action-baseline@v0.14.0
        env:
          ZAP_AUTH_HEADER: ${{ inputs.zap-auth-header }}
          ZAP_AUTH_HEADER_VALUE: ${{ inputs.zap-auth-header-value  }}
        with:
          issue_title: "OWASP ZAP report"
          fail_action: false
          target: ${{ inputs.zap-target-protocol }}://${{ env.ZAP_TARGET }}:${{ inputs.zap-target-port }}/
          cmd_options: ${{ inputs.zap-cmd-options }}
          rules_file_name: ${{ inputs.zap-rules-file-name }}
          artifact_name: zap-scan-${{ env.UNIQUE_ARTIFACT_SUFFIX }}
