# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

name: Promote charm

on:
  workflow_call:
    inputs:
      base-architecture:
        type: string
        description: Charm base architecture to promote (e.g. amd64)
        default: ""
      base-channel:
        type: string
        description: Charm base channel to promote (e.g. 22.04)
        default: ""
      base-name:
        type: string
        description: Charm base name to promote (e.g. ubuntu)
        default: ""
      charm-directory:
        type: string
        description: The directory for the charm under the working-directory
        default: "."
      destination-channel:
        type: string
        description: 'Destination Channel'
      doc-automation-disabled:
        type: boolean
        description: 'Whether to disable the documentation automation'
        default: true
      origin-channel:
        type: string
        description: 'Origin Channel'
      tag-prefix:
        type: string
        required: false
        description: |
          Tag prefix, useful when promoting multiple charms from the same repo.
      working-directory:
        type: string
        description: The working directory for jobs
        default: "./"
      charmcraft-channel:
        description: Charmcraft channel to use for promoting the charm.
        type: string
        default: latest/stable

jobs:
  validate-channels:
    name: Validate channels
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4.2.2
      - run: |
          set -e
          origin_track=$(echo ${{ inputs.origin-channel }} | cut -d "/" -f 1)
          destination_track=$(echo ${{ inputs.destination-channel }} | cut -d "/" -f 1)
          if [ $origin_track != $destination_track ]; then
            echo "::error::Destination track $destination_track does not match origin track $origin_track"
            exit 1
          fi
  get-charm-base:
    name: Get charm base
    runs-on: ubuntu-24.04
    env:
      CHARMCRAFT_AUTH: ${{ secrets.CHARMHUB_TOKEN }}
    outputs:
      name: ${{ steps.set-base-outputs.outputs.name }}
      channel: ${{ steps.set-base-outputs.outputs.channel }}
      architecture: ${{ steps.set-base-outputs.outputs.architecture }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Install charmcraft
        run: |
          set -e
          sudo snap install charmcraft --classic --channel ${{ inputs.charmcraft-channel }}
      - name: Get charm name
        working-directory: ${{ inputs.working-directory }}/${{ inputs.charm-directory }}
        run: |
          set -e
          if [[ ! -f "charmcraft.yaml" ]]; then
            echo "Error: charmcraft.yaml not found in the current directory."
            exit 1
          fi

          EXPANDED=$(CHARMCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS=1 charmcraft expand-extensions)
          CHARM_NAME=$(echo "$EXPANDED" | yq '.name')
          if [[ -z "$CHARM_NAME" || "$CHARM_NAME" == "null" ]]; then
            echo "Error: Could not extract charm name from charmcraft.yaml."
            exit 1
          fi
          echo "CHARM_NAME=$CHARM_NAME" >> $GITHUB_ENV

      - name: Get default charm base
        working-directory: ${{ inputs.working-directory }}/${{ inputs.charm-directory }}
        run: |
          status_json=$(charmcraft status "$CHARM_NAME" --format json)

          first_mapping=$(echo "$status_json" | jq -r '.[0].mappings[0].base')

          BASE_NAME=$(echo "$first_mapping" | jq -r '.name')
          BASE_CHANNEL=$(echo "$first_mapping" | jq -r '.channel')
          BASE_ARCHITECTURE=$(echo "$first_mapping" | jq -r '.architecture')

          echo "BASE_NAME=$BASE_NAME" >> $GITHUB_ENV
          echo "BASE_CHANNEL=$BASE_CHANNEL" >> $GITHUB_ENV
          echo "BASE_ARCHITECTURE=$BASE_ARCHITECTURE" >> $GITHUB_ENV

      - name: Validate inputs
        working-directory: ${{ inputs.working-directory }}/${{ inputs.charm-directory }}
        run: |
          set -e

          # if input is configured, check if it is present in the charm status
          target_base_arch=${{ inputs.base-architecture }}
          target_base_channel=${{ inputs.base-channel }}
          target_base_name=${{ inputs.base-name }}

          [[ -z "$target_base_name" ]] && target_base_name="$BASE_NAME"
          [[ -z "$target_base_channel" ]] && target_base_channel="$BASE_CHANNEL"
          [[ -z "$target_base_arch" ]] && target_base_arch="$BASE_ARCHITECTURE"

          if [[ -n "${{ inputs.base-name }}" || -n "${{ inputs.base-channel }}" || -n "${{ inputs.base-architecture }}" ]]; then
            status_json=$(charmcraft status "$CHARM_NAME" --format json)
            track=$(echo "${{ inputs.origin-channel }}" | cut -d '/' -f1)

            mappings=$(echo "$status_json" | jq -c --arg track "$track" '.[] | select(.track == $track) | .mappings[]')

            while IFS= read -r mapping; do
              base=$(echo "$mapping" | jq -r '.base')
              name=$(echo "$base" | jq -r '.name')
              channel=$(echo "$base" | jq -r '.channel')
              arch=$(echo "$base" | jq -r '.architecture')

              if [[ "$name" == "$target_base_name" && "$channel" == "$target_base_channel" && "$arch" == "$target_base_arch" ]]; then
                echo "Matched base: $name $channel $arch"
                echo "BASE_NAME=$name" >> $GITHUB_ENV
                echo "BASE_CHANNEL=$channel" >> $GITHUB_ENV
                echo "BASE_ARCHITECTURE=$arch" >> $GITHUB_ENV
                exit 0
              fi
            done <<< "$mappings"

            echo "::error::No matching base found in charm status for: $target_base_name $target_base_channel $target_base_arch"
            exit 1
          else
            echo "No inputs provided for base name, channel, or architecture. Skipping validation."
          fi
      - name: Set outputs
        id: set-base-outputs
        run: |
          echo "name=$BASE_NAME" >> $GITHUB_OUTPUT
          echo "channel=$BASE_CHANNEL" >> $GITHUB_OUTPUT
          echo "architecture=$BASE_ARCHITECTURE" >> $GITHUB_OUTPUT
  promote-charm:
    name: Promote charm
    runs-on: ubuntu-latest
    needs: [get-charm-base,validate-channels]
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Release charm to channel
        uses: canonical/charming-actions/release-charm@2.7.0
        with:
          credentials: ${{ secrets.CHARMHUB_TOKEN }}
          charm-path: ${{ inputs.working-directory }}/${{ inputs.charm-directory }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          origin-channel: ${{ inputs.origin-channel }}
          destination-channel: ${{ inputs.destination-channel }}
          base-name: ${{ needs.get-charm-base.outputs.name }}
          base-channel: ${{ needs.get-charm-base.outputs.channel }}
          base-architecture: ${{ needs.get-charm-base.outputs.architecture }}
          tag-prefix: ${{ inputs.tag-prefix }}
  publish-docs:
    if: endsWith(github.event.inputs.destination-channel, '/stable')
    name: Publish docs
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}/${{ inputs.charm-directory }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Search for docs folder
        id: docs-exist
        run: echo "docs_exist=$([[ -d docs ]] && echo 'True' || echo 'False')" >> $GITHUB_OUTPUT
      - name: Publish documentation
        if: ${{ steps.docs-exist.outputs.docs_exist == 'True' && env.discourse_api_username != '' && env.discourse_api_key != '' }}
        uses: canonical/discourse-gatekeeper@stable
        id: publishDocumentation
        env: 
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
        with:
          discourse_host: discourse.charmhub.io
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
          dry_run: ${{ inputs.doc-automation-disabled }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          charm_dir:  ${{ inputs.working-directory }}/${{ inputs.charm-directory }}
      - name: Show index page
        if: ${{ steps.docs-exist.outputs.docs_exist == 'True' && env.discourse_api_username != '' && env.discourse_api_key != '' }}
        run: echo '${{ steps.publishDocumentation.outputs.index_url }}'
        env: 
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
