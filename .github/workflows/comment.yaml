name: Comment on the pull request

on:
  workflow_call:

env:
  ARTIFACT_NAME: report

jobs:
  comment-on-pr:
    name: Comment on PR
    runs-on: ubuntu-22.04
    if: github.event.workflow_run.event == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Download test report artifact
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const owner = context.payload.workflow_run.repository.owner.login;
            const repo = context.payload.workflow_run.repository.name;
            const run_id = ${{ github.event.workflow_run.id }};
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: owner,
                repo: repo,
                run_id: run_id,
            });
            const matchArtifact = artifacts.data.artifacts.filter(artifact => 
              artifact.name == '${{ env.ARTIFACT_NAME }}'
            )[0];
            const download = await github.rest.actions.downloadArtifact({
                owner: owner,
                repo: repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            fs.writeFileSync('${{ env.ARTIFACT_NAME }}.zip', Buffer.from(download.data));
      - name: Unzip
        shell: bash
        run: unzip ${{ env.ARTIFACT_NAME }}.zip
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comments = JSON.parse(fs.readFileSync('${{ env.ARTIFACT_NAME }}.json'));

            const owner = context.payload.workflow_run.repository.owner.login;
            const repo = context.payload.workflow_run.repository.name;

            const pull = (await github.rest.pulls.list({
              owner : context.repo.owner,
              repo : context.repo.repo,
            })).data.filter(pr => pr.head.sha == context.payload.workflow_run.head_sha)[0];
            const issue_number = pull.number;

            const createComment = async (body) => {
                await github.rest.issues.createComment({
                    owner: owner,
                    repo: repo,
                    issue_number: issue_number,
                    body,
                });
            }

            const deleteGithubActionsComments = async () => {
                const existingComments = await github.rest.issues.listComments({
                    owner: owner,
                    repo: repo,
                    issue_number: issue_number,
                });
                const githubActionsComments = existingComments.data.filter(
                    comment => comment.user.login == 'github-actions[bot]'
                );
                for (const comment of githubActionsComments) {
                    await github.rest.issues.deleteComment({
                        owner: owner,
                        repo: repo,
                        comment_id: comment.id,
                    });
                }
            }

            await deleteGithubActionsComments();
            for (const comment of comments) {
                await createComment(comment);
            }
